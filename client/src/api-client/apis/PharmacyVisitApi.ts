/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanResponse,
  GetPharmaciesToVisitRequest,
  GetPharmaciesToVisitResponseResponse,
} from '../models';
import {
    BooleanResponseFromJSON,
    BooleanResponseToJSON,
    GetPharmaciesToVisitRequestFromJSON,
    GetPharmaciesToVisitRequestToJSON,
    GetPharmaciesToVisitResponseResponseFromJSON,
    GetPharmaciesToVisitResponseResponseToJSON,
} from '../models';

export interface PharmacyVisitInsertPostRequest {
    contentType?: string;
    contentDisposition?: string;
    length?: number;
    name?: string;
    fileName?: string;
}

export interface PharmacyVisitPostRequest {
    getPharmaciesToVisitRequest?: GetPharmaciesToVisitRequest;
}

/**
 * 
 */
export class PharmacyVisitApi extends runtime.BaseAPI {

    /**
     */
    async pharmacyVisitInsertPostRaw(requestParameters: PharmacyVisitInsertPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.contentType !== undefined) {
            formParams.append('ContentType', requestParameters.contentType as any);
        }

        if (requestParameters.contentDisposition !== undefined) {
            formParams.append('ContentDisposition', requestParameters.contentDisposition as any);
        }

        if (requestParameters.length !== undefined) {
            formParams.append('Length', requestParameters.length as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('Name', requestParameters.name as any);
        }

        if (requestParameters.fileName !== undefined) {
            formParams.append('FileName', requestParameters.fileName as any);
        }

        const response = await this.request({
            path: `/PharmacyVisit/insert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseFromJSON(jsonValue));
    }

    /**
     */
    async pharmacyVisitInsertPost(requestParameters: PharmacyVisitInsertPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponse> {
        const response = await this.pharmacyVisitInsertPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pharmacyVisitPostRaw(requestParameters: PharmacyVisitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPharmaciesToVisitResponseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/PharmacyVisit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPharmaciesToVisitRequestToJSON(requestParameters.getPharmaciesToVisitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPharmaciesToVisitResponseResponseFromJSON(jsonValue));
    }

    /**
     */
    async pharmacyVisitPost(requestParameters: PharmacyVisitPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPharmaciesToVisitResponseResponse> {
        const response = await this.pharmacyVisitPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
